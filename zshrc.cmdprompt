autoload colors
colors

# awesome prompt from http://aperiodic.net/phil/prompt/

# run before the prompt is rendered
function precmd {
  local TERMWIDTH
  (( TERMWIDTH = ${COLUMNS} - 1 ))

  # Truncate path if it's too long
  PR_FILLBAR=""
  PR_PWDLEN=""

  PR_FILLBAR=""
  PR_PWDLEN=""

  if which git > /dev/null; then 
    PR_BRANCH=`git branch 2> /dev/null | awk '{ if (NF == 2)  print $2 }'`
  else 
    PR_BRANCH=''
  fi 

  if which rvm > /dev/null; then 
    PR_GEMSET=`rvm info 2> /dev/null | awk '{if (NF == 1 && /@/) print }'`
  else 
    PR_GEMSET=''
  fi 

  local promptsize=${#${():---(${PR_GEMSET}${PR_BRANCH})---()--}} 
  local pwdsize=${#${(%):-%~}}

  if [[ "$promptsize + $pwdsize" -gt $TERMWIDTH ]]; then
    ((PR_PWDLEN=$TERMWIDTH - $promptsize))
  else
    PR_FILLBAR="\${(l.(($TERMWIDTH - ($promptsize + $pwdsize) - 1))..${PR_HBAR}.)}"
  fi

  # Get APM info
  if which ibam > /dev/null; then
    PR_APM_RESULT=`ibam --percentbattery`
  elif which apm > /dev/null; then
    PR_APM_RESULT=`apm`
  elif which pmset > /dev/null; then
    PR_APM_RESULT=`pmset -g batt` 
  fi
}

setopt extended_glob
# run after a command is entered, but before it runs
preexec () {
  # this gets the program name, filtering for sudo and options
  if [[ "$TERM" == "screen" ]]; then
    local CMD=${1[(wr)^(*=*|sudo|-*)]}
    echo -ne "\ek$CMD\e\\"
  fi
}

setprompt () {
  setopt prompt_subst
  
  # determine if we can use colors
  # I guess this is necessary, but do we really have terminals 
  # witout colors today?
  autoload colors zsh/terminfo
  if [[ "$terminfo[colors]" -ge 8 ]]; then
    colors
  fi
  for color in RED GREEN YELLOW BLUE MAGENTA CYAN WHITE; do
    eval PR_$color='%{$terminfo[bold]$fg[${(L)color}]%}'
    eval PR_LIGHT_$color='%{$fg[${(L)color}]%}'
    (( count = $count + 1 ))
  done
  PR_NO_COLOR="%{$terminfo[srg0]%}"

  # see if we can use extended characters to look nicer
  # this is kind of ... esoteric.  Basically we need to
  # get a fancy character set to draw pretty ilnes
  # this construct ${[varname]:-[string]} will use the 
  # variable or the string.  The net is that if we don't
  # have access to the character set, we'll use a '-'
  
  # this doesn't seem to work in osx.  It seems to 
  # support the characterset (so it's there), but just
  # has the regular characters in it
  typeset -A altchar
  set -A altchar ${(s..)terminfo[acsc]}
  # if [[ `uname` -eq "Darwin" ]]; then
  #  PR_SET_CHARSET=''
  #  PR_SHIFT_IN=''
  #  PR_SHIFT_OUT=''
  #  PR_HBAR='-'
  #  PR_ULCORNER='-'
  #  PR_LLCORNER='-'
  #  PR_LRCORNER='-'
  #  PR_URCORNER='-'
  # else
    PR_SET_CHARSET="%{$terminfo[enacs]%}"
    PR_SHIFT_IN="%{$terminfo[smacs]%}"
    PR_SHIFT_OUT="%{$terminfo[rmacs]%}"
    PR_HBAR=${altchar[q]:--}
    PR_ULCORNER=${altchar[l]:--}
    PR_LLCORNER=${altchar[m]:--}
    PR_LRCORNER=${altchar[j]:--}
    PR_URCORNER=${altchar[k]:--}
  #fi

  # Lets set the title bar 
  # $'...' uses echo -e escape sequences
  # %([char].[true str].[false str])  used on the bang
    case $TERM in
	xterm*)
	    PR_TITLEBAR=$'%{\e]0;%(!.-=*[ROOT]*=- | .)%n@%m:%~ | ${COLUMNS}x${LINES} | %y\a%}'
    ;;
	screen)
	    PR_TITLEBAR=$'%{\e_screen \005 (\005t) | %(!.-=[ROOT]=- | .)%n@%m:%~ | ${COLUMNS}x${LINES} | %y\e\\%}'
    ;;
	*)
	    PR_TITLEBAR=''
    ;;
    esac

    ###
    # Decide whether to set a screen title
    if [[ "$TERM" == "screen" ]]; then
	PR_STITLE=$'%{\ekzsh\e\\%}'
    else
	PR_STITLE=''
    fi

  # APM detection
  if which ibam > /dev/null; then
    PR_APM='$PR_RED${${PR_APM_RESULT[(f)1]}[(w)-2]}%%(${${PR_APM_RESULT[(f)3]}[(w)-1]})$PR_LIGHT_BLUE:'
  elif which apm > /dev/null; then
    PR_APM='$PR_RED${PR_APM_RESULT[(w)5,(w)6]/\% /%%}$PR_LIGHT_BLUE:'
    # try to movidy for OSX
  elif which pmset > /dev/null; then
    PR_APM='$PR_RED${${PR_APM_RESULT[(f)2]}[(w)2]}%%(${${PR_APM_RESULT[(f)2]}[(w)4]})$PR_LIGHT_BLUE:'
  else
    PR_APM=''
  fi

  if which git > /dev/null; then 
    PR_BRANCH=`git branch | awk '{ if (NF == 2)  print $2 }'`
  else 
    PR_BRANCH=''
  fi 

  if which rvm > /dev/null; then 
    PR_GEMSET=`rvm info | awk '{if (NF == 1 && /@/) print }'`
  else 
    PR_GEMSET=''
  fi 

    PROMPT='$PR_SET_CHARSET$PR_STITLE${(e)PR_TITLEBAR}\
$PR_CYAN$PR_SHIFT_IN$PR_ULCORNER$PR_BLUE$PR_HBAR$PR_SHIFT_OUT\
($PR_GREEN$PR_GEMSET$PR_BRANCH$PR_BLUE)\
$PR_SHIFT_IN$PR_HBAR$PR_CYAN$PR_HBAR${(e)PR_FILLBAR}$PR_BLUE$PR_HBAR$PR_SHIFT_OUT\
( $PR_MAGENTA%$PR_PWDLEN<...<%~%<<$PR_BLUE)\
$PR_SHIFT_IN$PR_HBAR$PR_CYAN$PR_URCORNER$PR_SHIFT_OUT\

$PR_CYAN$PR_SHIFT_IN$PR_LLCORNER$PR_BLUE$PR_HBAR$PR_SHIFT_OUT(\
%(?..$PR_LIGHT_RED%?$PR_BLUE:)\
${(e)PR_APM}$PR_YELLOW%D{%H:%M}\
$PR_LIGHT_BLUE:%(!.$PR_RED.$PR_WHITE)%#$PR_BLUE)$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
$PR_CYAN$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
$PR_NO_COLOUR '

  # here we go
  # there are 2 lines to the prompt, divided by the blank line below
  # this is the right hand side
  RPROMPT=' $PR_CYAN$PR_SHIFT_IN$PR_HBAR$PR_BLUE$PR_HBAR$PR_SHIFT_OUT\
($PR_YELLOW%D{%a,%b%d}$PR_BLUE)$PR_SHIFT_IN$PR_HBAR$PR_CYAN$PR_LRCORNER$PR_SHIFT_OUT$PR_NO_COLOUR'

  # this is the continuation prompt
  # the realy important part is in the middle of this 
  # the %_ is what's showing the reason for the prompt
  PS2='$PR_CYAN$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
$PR_BLUE$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT(\
$PR_LIGHT_GREEN%_$PR_BLUE)$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
$PR_CYAN$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT$PR_NO_COLOUR '



}

setprompt
